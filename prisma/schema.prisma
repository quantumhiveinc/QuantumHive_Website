// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql" // Set the provider to PostgreSQL
  url      = env("DATABASE_URL") // Loads the connection string from .env
}

// Model for Blog Posts
model BlogPost {
  id          Int      @id @default(autoincrement()) // Or use cuid() or uuid() if preferred
  title       String
  slug        String   @unique // Unique slug for URL identification
  description String?  // Optional short description/excerpt
  contentJson     Json?    // Store structured content from WYSIWYG editor
  published   Boolean  @default(false) // Flag to control visibility
  publishedAt DateTime? // Optional timestamp for when it was published
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  featuredImageUrl String?  // URL for the main image (e.g., from S3)
  metaTitle        String?  // SEO Meta Title
  metaDescription  String?  // SEO Meta Description
  youtubeUrl       String?  // URL for YouTube video embed

  // Relations
  // authorId         Int? // Removed Author relation
  // author           Author?  @relation(fields: [authorId], references: [id], onDelete: SetNull) // Removed Author relation

  categories       Category[] @relation("BlogPostCategories") // Many-to-many with Category
  tags             Tag[]      @relation("BlogPostTags")     // Many-to-many with Tag
  galleryImages    Image[]    // One-to-many with Image (for gallery)

  @@map("blog_posts") // Optional: Define the table name explicitly
}

// Model for Case Studies
model CaseStudy {
  id          Int      @id @default(autoincrement())
  title       String
  slug        String   @unique
  description String?
  content     String?
  published   Boolean  @default(false)
  publishedAt DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  // Add specific fields like clientName, industry, results later

  @@map("case_studies")
}

// Model for Authors (Removed)
// model Author { ... }

// Model for Categories
model Category {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  slug      String   @unique

  posts     BlogPost[] @relation("BlogPostCategories") // Many-to-many relation field

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("categories")
}

// Model for Tags
model Tag {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  slug      String   @unique

  posts     BlogPost[] @relation("BlogPostTags") // Many-to-many relation field

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("tags")
}

// Model for Gallery Images associated with a BlogPost
model Image {
  id         Int      @id @default(autoincrement())
  url        String   // URL of the image (e.g., from S3)
  altText    String?  // Alt text for accessibility

  blogPostId Int      // Foreign key to BlogPost
  blogPost   BlogPost @relation(fields: [blogPostId], references: [id], onDelete: Cascade) // Relation to BlogPost, delete image if post is deleted

  createdAt  DateTime @default(now())

  @@map("images")
}

// Model for Industries
model Industry {
  id          Int      @id @default(autoincrement())
  title       String   @unique // Industry name should be unique
  slug        String   @unique
  description String?
  content     String?  // Detailed description of the industry focus
  published   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  // Add specific fields like associatedServices, representativeImage later

  @@map("industries")
}

// Model for Application Settings
model Setting {
  id        String   @id @default(cuid())
  key       String   @unique // e.g., "unsplash_access_key", "site_title"
  value     String   // Store encrypted values for sensitive keys
  category  String   // e.g., "integrations", "general" - for grouping/filtering
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([category]) // Add index for faster lookups by category
  @@map("settings")
}

// Model for Leads
model Lead {
  id                  Int      @id @default(autoincrement())
  fullName            String
  email               String   @unique
  phone               String?
  company             String?
  message             String?  @db.Text
  sourceFormName      String
  submissionUrl       String
  submissionTimestamp DateTime @default(now())
  ipAddress           String?
  status              String   @default("New")

  createdAt           DateTime @default(now()) // Standard timestamp
  updatedAt           DateTime @updatedAt     // Standard timestamp

  @@index([sourceFormName])
  @@index([status])
  @@index([submissionTimestamp])
  @@map("leads") // Explicit table name
}

// Model for Services
model Service {
  id          Int      @id @default(autoincrement())
  title       String
  slug        String   @unique
  description String?  @db.Text
  icon        String?  // Optional: For an icon representation (e.g., SVG name or URL)
  published   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("services")
}
