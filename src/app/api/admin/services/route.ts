// src/app/api/admin/services/route.ts
import { NextResponse, NextRequest } from 'next/server'; // Import NextRequest
import { auth } from '@/auth'; // Import auth
import dbConnect from '@/lib/mongoose'; // Import Mongoose connection
import Service from '@/models/Service'; // Import Mongoose model
// import { slugify } from '@/lib/slugify'; // Removed unused import

export async function POST(request: NextRequest) { // Use NextRequest
  const session = await auth();
  // Add Authentication & Authorization Check (Admin only)
  if (!session?.user || session.user.role !== 'ADMIN') {
      return NextResponse.json({ error: 'Unauthorized: Admin role required' }, { status: 403 });
  }

  try {
    await dbConnect(); // Ensure DB connection
    const body = await request.json();
    const { title, description } = body; // Assuming slug is auto-generated by model

    // Basic validation
    if (!title || typeof title !== 'string' || title.trim() === '') {
        return NextResponse.json({ error: 'Service title is required.' }, { status: 400 });
    }

    // Create service using Mongoose model
    // Slug will be generated by the pre-save hook in the model
    const newService = await Service.create({
        title: title.trim(),
        description: description?.trim(), // Handle optional description
    });

    return NextResponse.json(newService, { status: 201 });

  } catch (error: unknown) {
    console.error("Error creating service:", error);
    if (error instanceof SyntaxError) {
        return NextResponse.json({ error: 'Invalid JSON payload' }, { status: 400 });
    }
    // Handle Mongoose unique constraint errors (slug or title if made unique)
    if (typeof error === 'object' && error !== null && 'code' in error && error.code === 11000) {
         const keyPattern = (error as { keyPattern?: Record<string, number> }).keyPattern;
         if (keyPattern && keyPattern.slug) {
             return NextResponse.json({ error: 'A service with this title (resulting in the same slug) might already exist.' }, { status: 409 });
         }
         // Add check for title if title is unique in schema
         // if (keyPattern && keyPattern.title) { ... }
         return NextResponse.json({ error: 'A unique field constraint was violated.' }, { status: 409 });
    }
    // Handle Mongoose validation errors
    if (error instanceof Error && error.name === 'ValidationError') {
        return NextResponse.json({ error: `Validation failed: ${error.message}` }, { status: 400 });
    }
    return NextResponse.json({ error: 'Failed to create service due to a server error.' }, { status: 500 });
  }
}

export async function GET() {
  // Public GET or add auth check if needed
  // const session = await auth();
  // if (!session?.user) {
  //     return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
  // }

  try {
    await dbConnect(); // Ensure DB connection
    const services = await Service.find().sort({ title: 'asc' }); // Fetch and sort services
    return NextResponse.json(services);
  } catch (error: unknown) {
    console.error("Error fetching services:", error);
    // Handle potential errors during fetch
    return NextResponse.json({ error: 'Failed to fetch services due to a server error.' }, { status: 500 });
  }
}